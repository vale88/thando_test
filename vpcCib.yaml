AWSTemplateFormatVersion: 2010-09-09
Description: VPC

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: VPC
      Parameters:
      - VPCName
      - VPCCIDR
      - PrivateHostedZoneName
      - TransitGatewayId
    - Label:
        default: Tier 1 (Required)
      Parameters:
      - Tier1Name
      - SubnetTier1AZ1CIDR
      - SubnetTier1AZ2CIDR
    - Label:
        default: Tier 2
      Parameters:
      - Tier2Name
      - SubnetTier2AZ1CIDR
      - SubnetTier2AZ2CIDR
    - Label:
        default: Tier 3
      Parameters:
      - Tier3Name
      - SubnetTier3AZ1CIDR
      - SubnetTier3AZ2CIDR
    - Label:
        default: Tier 4
      Parameters:
      - Tier4Name
      - SubnetTier4AZ1CIDR
      - SubnetTier4AZ2CIDR
    ParameterLabels:
      VPCName:
        default: 'VPC Name'
      VPCCIDR:
        default: 'VPC CIDR'
      PrivateHostedZoneName:
        default: 'Private Hosted Zone Name'
      TransitGatewayId:
        default: 'TransitGateway ID'
      Tier1Name:
        default: 'Tier 1 Name'
      SubnetTier1AZ1CIDR:
        default: 'Tier 1 AZ1 CIDR'
      SubnetTier1AZ2CIDR:
        default: 'Tier 1 AZ2 CIDR'
      Tier2Name:
        default: 'Tier 2 Name'
      SubnetTier2AZ1CIDR:
        default: 'Tier 2 AZ1 CIDR'
      SubnetTier2AZ2CIDR:
        default: 'Tier 2 AZ2 CIDR'
      Tier3Name:
        default: 'Tier 3 Name'
      SubnetTier3AZ1CIDR:
        default: 'Tier 3 AZ1 CIDR'
      SubnetTier3AZ2CIDR:
        default: 'Tier 3 AZ2 CIDR'
      Tier4Name:
        default: 'Tier 4 Name'
      SubnetTier4AZ1CIDR:
        default: 'Tier 4 AZ1 CIDR'
      SubnetTier4AZ2CIDR:
        default: 'Tier 4 AZ2 CIDR'

Parameters:
  VPCName:
    Type: String
    Description: 'The name for this VPC'
    Default: ping-api-vpc
  VPCCIDR:
    Type: String
    Description: 'CIDR block for the VPC'
    Default: 10.107.31.0/25
  PrivateHostedZoneName:
    Type: String
    Description: 'The name of the private hosted zone to be associated with this VPC'
    Default: ''
  TransitGatewayId:
    Type: String
    Description: 'Transit Gateway ID to attach this VPC to'
    Default: tgw-0287771349e8cb90e

  Tier1Name:
    Type: String
    Description: 'The logical name for the subnets in this tier'
    Default: public
  SubnetTier1AZ1CIDR:
    Type: String
    Description: 'The CIDR block for this subnet (optional)'
    Default: 10.107.31.0/27
  SubnetTier1AZ2CIDR:
    Type: String
    Description: 'The CIDR block for this subnet (optional)'
    Default: 10.106.43.32/27

  Tier2Name:
    Type: String
    Description: 'The logical name for the subnets in this tier'
    Default: private
  SubnetTier2AZ1CIDR:
    Type: String
    Description: 'The CIDR block for this subnet (optional)'
    Default: 10.106.43.64/27
  SubnetTier2AZ2CIDR:
    Type: String
    Description: 'The CIDR block for this subnet (optional)'
    Default: 10.106.43.96/27

  Tier3Name:
    Type: String
    Description: 'The logical name for the subnets in this tier'
    Default: ''
  SubnetTier3AZ1CIDR:
    Type: String
    Description: 'The CIDR block for this subnet (optional)'
    Default: ''
  SubnetTier3AZ2CIDR:
    Type: String
    Description: 'The CIDR block for this subnet (optional)'
    Default: ''

  Tier4Name:
    Type: String
    Description: 'The logical name for the subnets in this tier'
    Default: ''
  SubnetTier4AZ1CIDR:
    Type: String
    Description: 'The CIDR block for this subnet (optional)'
    Default: ''
  SubnetTier4AZ2CIDR:
    Type: String
    Description: 'The CIDR block for this subnet (optional)'
    Default: ''

Conditions:
  TransitGatewayAttached: !Not [!Equals [!Ref TransitGatewayId, '']]
  PrivateHostedZoneEnabled: !Not [!Equals [!Ref PrivateHostedZoneName, '']]

  Tier2AZ1Available: !Not [!Equals [!Ref SubnetTier2AZ1CIDR, '']]
  Tier2AZ2Available: !Not [!Equals [!Ref SubnetTier2AZ2CIDR, '']]
  Tier2Available: !Or
    - Condition: Tier2AZ1Available
    - Condition: Tier2AZ2Available
  Tier2WithTransitGatewayAvailable: !And
    - Condition: Tier2Available
    - Condition: TransitGatewayAttached

  Tier3AZ1Available: !Not [!Equals [!Ref SubnetTier3AZ1CIDR, '']]
  Tier3AZ2Available: !Not [!Equals [!Ref SubnetTier3AZ2CIDR, '']]
  Tier3Available: !Or
    - Condition: Tier3AZ1Available
    - Condition: Tier3AZ2Available
  Tier3WithTransitGatewayAvailable: !And
    - Condition: Tier3Available
    - Condition: TransitGatewayAttached

  Tier4AZ1Available: !Not [!Equals [!Ref SubnetTier4AZ1CIDR, '']]
  Tier4AZ2Available: !Not [!Equals [!Ref SubnetTier4AZ2CIDR, '']]
  Tier4Available: !Or
    - Condition: Tier4AZ1Available
    - Condition: Tier4AZ2Available
  Tier4WithTransitGatewayAvailable: !And
    - Condition: Tier4Available
    - Condition: TransitGatewayAttached

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${VPCName}-${AWS::Region}'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
    DependsOn:
      - VPC

  PrivateHostedZone:
    Type: AWS::Route53::HostedZone
    Condition: PrivateHostedZoneEnabled
    Properties:
      Name: !Ref PrivateHostedZoneName
      VPCs:
        -
          VPCId: !Ref VPC
          VPCRegion: !Ref AWS::Region
    DependsOn:
      - VPC

  TransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Condition: TransitGatewayAttached
    Properties:
      SubnetIds:
        - !Ref SubnetTier2AZ1
        - !Ref SubnetTier2AZ2
      TransitGatewayId: !Ref TransitGatewayId
      VpcId: !Ref VPC
    DependsOn:
      - VPC

  # Tier 1

  SubnetTier1AZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref SubnetTier1AZ1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - '${name}-${tier}-subnet-${zone}'
            - name: !Ref VPCName
              tier: !Ref Tier1Name
              zone: !Select [ 0, !GetAZs  '' ]

  SubnetTier1AZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref SubnetTier1AZ2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - '${name}-${tier}-subnet-${zone}'
            - name: !Ref VPCName
              tier: !Ref Tier1Name
              zone: !Select [ 1, !GetAZs  '' ]

  Tier1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${Tier1Name}-routes'

  Tier1IGWRoute:
    Type: AWS::EC2::Route
    Condition: TransitGatewayAttached
    Properties:
      RouteTableId: !Ref Tier1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn:
      - InternetGatewayAttachment

  Tier1AZ1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Tier1RouteTable
      SubnetId: !Ref SubnetTier1AZ1

  Tier1AZ2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Tier1RouteTable
      SubnetId: !Ref SubnetTier1AZ2

  NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${Tier1Name}-nacl'
      VpcId: !Ref VPC

  SubnetAZ1NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NACL
      SubnetId: !Ref SubnetTier1AZ1

  SubnetAZ2NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NACL
      SubnetId: !Ref SubnetTier1AZ2

  # Tier 2

  SubnetTier2AZ1:
    Type: AWS::EC2::Subnet
    Condition: Tier2AZ1Available
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref SubnetTier2AZ1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub
            - '${name}-${tier}-subnet-${zone}'
            - name: !Ref VPCName
              tier: !Ref Tier2Name
              zone: !Select [ 0, !GetAZs  '' ]

  SubnetTier2AZ2:
    Type: AWS::EC2::Subnet
    Condition: Tier2AZ2Available
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref SubnetTier2AZ2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub
            - '${name}-${tier}-subnet-${zone}'
            - name: !Ref VPCName
              tier: !Ref Tier2Name
              zone: !Select [ 1, !GetAZs  '' ]

  Tier2RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: Tier2Available
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${Tier2Name}-routes'

  Tier2VPNRoute:
    Type: AWS::EC2::Route
    Condition: Tier2WithTransitGatewayAvailable
    Properties:
      RouteTableId: !Ref Tier2RouteTable
      DestinationCidrBlock: 10.0.0.0/8
      TransitGatewayId: !Ref TransitGatewayId
    DependsOn:
      - TransitGatewayAttachment

  Tier2EgressRoute:
    Type: AWS::EC2::Route
    Condition: Tier2WithTransitGatewayAvailable
    Properties:
      RouteTableId: !Ref Tier2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayId: !Ref TransitGatewayId
    DependsOn:
      - TransitGatewayAttachment

  Tier2AZ1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Tier2AZ1Available
    Properties:
      RouteTableId: !Ref Tier2RouteTable
      SubnetId: !Ref SubnetTier2AZ1

  Tier2AZ2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Tier2AZ2Available
    Properties:
      RouteTableId: !Ref Tier2RouteTable
      SubnetId: !Ref SubnetTier2AZ2

  # Tier 3

  SubnetTier3AZ1:
    Type: AWS::EC2::Subnet
    Condition: Tier3AZ1Available
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref SubnetTier3AZ1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub
            - '${name}-${tier}-subnet-${zone}'
            - name: !Ref VPCName
              tier: !Ref Tier3Name
              zone: !Select [ 0, !GetAZs  '' ]

  SubnetTier3AZ2:
    Type: AWS::EC2::Subnet
    Condition: Tier3AZ2Available
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref SubnetTier3AZ2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub
            - '${name}-${tier}-subnet-${zone}'
            - name: !Ref VPCName
              tier: !Ref Tier3Name
              zone: !Select [ 1, !GetAZs  '' ]

  Tier3RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: Tier3Available
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${Tier3Name}-routes'

  Tier3VPNRoute:
    Type: AWS::EC2::Route
    Condition: Tier3WithTransitGatewayAvailable
    Properties:
      RouteTableId: !Ref Tier3RouteTable
      DestinationCidrBlock: 10.0.0.0/8
      TransitGatewayId: !Ref TransitGatewayId
    DependsOn:
      - TransitGatewayAttachment

  Tier3EgressRoute:
    Type: AWS::EC2::Route
    Condition: Tier3WithTransitGatewayAvailable
    Properties:
      RouteTableId: !Ref Tier3RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayId: !Ref TransitGatewayId
    DependsOn:
      - TransitGatewayAttachment

  Tier3AZ1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Tier3AZ1Available
    Properties:
      RouteTableId: !Ref Tier3RouteTable
      SubnetId: !Ref SubnetTier3AZ1

  Tier3AZ2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Tier3AZ2Available
    Properties:
      RouteTableId: !Ref Tier3RouteTable
      SubnetId: !Ref SubnetTier3AZ2

  # Tier 4

  SubnetTier4AZ1:
    Type: AWS::EC2::Subnet
    Condition: Tier4AZ1Available
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref SubnetTier4AZ1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub
            - '${name}-${tier}-subnet-${zone}'
            - name: !Ref VPCName
              tier: !Ref Tier4Name
              zone: !Select [ 0, !GetAZs  '' ]

  SubnetTier4AZ2:
    Type: AWS::EC2::Subnet
    Condition: Tier4AZ2Available
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref SubnetTier4AZ2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub
            - '${name}-${tier}-subnet-${zone}'
            - name: !Ref VPCName
              tier: !Ref Tier4Name
              zone: !Select [ 1, !GetAZs  '' ]

  Tier4RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: Tier4Available
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${Tier4Name}-routes'

  Tier4VPNRoute:
    Type: AWS::EC2::Route
    Condition: Tier4WithTransitGatewayAvailable
    Properties:
      RouteTableId: !Ref Tier4RouteTable
      DestinationCidrBlock: 10.0.0.0/8
      TransitGatewayId: !Ref TransitGatewayId
    DependsOn:
      - TransitGatewayAttachment

  Tier4EgressRoute:
    Type: AWS::EC2::Route
    Condition: Tier4WithTransitGatewayAvailable
    Properties:
      RouteTableId: !Ref Tier4RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayId: !Ref TransitGatewayId
    DependsOn:
      - TransitGatewayAttachment

  Tier4AZ1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Tier4AZ1Available
    Properties:
      RouteTableId: !Ref Tier4RouteTable
      SubnetId: !Ref SubnetTier4AZ1

  Tier4AZ2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Tier4AZ2Available
    Properties:
      RouteTableId: !Ref Tier4RouteTable
      SubnetId: !Ref SubnetTier4AZ2

  # Route 53

  ForwardResolverRule:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      Name: fwd-all
      ResolverRuleId: rslvr-rr-e79eb3970a0640469
      VPCId: !Ref VPC
    DependsOn:
      - VPC

  EC2ResolverRule:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      Name: vpce-system-ec2
      ResolverRuleId: rslvr-rr-8c60d75cd47340f4b
      VPCId: !Ref VPC
    DependsOn:
      - VPC

  S3ResolverRule:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      Name: vpce-system-s3
      ResolverRuleId: rslvr-rr-5764a666c52a48d1a
      VPCId: !Ref VPC
    DependsOn:
      - VPC

  SSMResolverRule:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      Name: vpce-system-ssm
      ResolverRuleId: rslvr-rr-5b733acdfd81490fa
      VPCId: !Ref VPC
    DependsOn:
      - VPC

  # Flow Logs

  VPCFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90

  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - vpc-flow-logs.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: LogRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Resource: '*'

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogsRole.Arn
      LogGroupName: !Ref VPCFlowLogsLogGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL

Outputs:
  VPCName:
    Value: !Ref VPCName
    Export:
      Name: !Sub '${AWS::StackName}-VPCName'

  VPCID:
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'

  VPCCIDR:
    Value: !Ref VPCCIDR
    Export:
      Name: !Sub '${AWS::StackName}-VPCCIDR'

  PrivateHostedZoneName:
    Condition: PrivateHostedZoneEnabled
    Value: !Ref PrivateHostedZoneName
    Export:
      Name: !Sub '${AWS::StackName}-PrivateHostedZoneName'

  PrivateHostedZoneID:
    Condition: PrivateHostedZoneEnabled
    Value: !Ref PrivateHostedZone
    Export:
      Name: !Sub '${AWS::StackName}-PrivateHostedZoneID'

  TransitGatewayID:
    Condition: TransitGatewayAttached
    Value: !Ref TransitGatewayId
    Export:
      Name: !Sub '${AWS::StackName}-TransitGatewayID'

  Tier1Name:
    Value: !Ref Tier1Name
    Export:
      Name: !Sub '${AWS::StackName}-Tier1Name'

  SubnetTier1AZ1:
    Value: !Ref SubnetTier1AZ1
    Export:
      Name: !Sub '${AWS::StackName}-SubnetTier1AZ1'

  SubnetTier1AZ2:
    Value: !Ref SubnetTier1AZ2
    Export:
      Name: !Sub '${AWS::StackName}-SubnetTier1AZ2'

  SubnetTier1AZ1CIDR:
    Value: !Ref SubnetTier1AZ1CIDR
    Export:
      Name: !Sub '${AWS::StackName}-SubnetTier1AZ1CIDR'

  SubnetTier1AZ2CIDR:
    Value: !Ref SubnetTier1AZ2CIDR
    Export:
      Name: !Sub '${AWS::StackName}-SubnetTier1AZ2CIDR'

  Tier1RouteTable:
    Value: !Ref Tier1RouteTable
    Export:
      Name: !Sub '${AWS::StackName}-Tier1RouteTable'

  Tier2Name:
    Condition: Tier2Available
    Value: !Ref Tier2Name
    Export:
      Name: !Sub '${AWS::StackName}-Tier2Name'

  SubnetTier2AZ1CIDR:
    Condition: Tier2AZ1Available
    Value: !Ref SubnetTier2AZ1CIDR
    Export:
      Name: !Sub '${AWS::StackName}-SubnetTier2AZ1CIDR'

  SubnetTier2AZ1:
    Condition: Tier2AZ1Available
    Value: !Ref SubnetTier2AZ1
    Export:
      Name: !Sub '${AWS::StackName}-SubnetTier2AZ1'

  SubnetTier2AZ2CIDR:
    Condition: Tier2AZ2Available
    Value: !Ref SubnetTier2AZ2CIDR
    Export:
      Name: !Sub '${AWS::StackName}-SubnetTier2AZ2CIDR'

  SubnetTier2AZ2:
    Condition: Tier2AZ2Available
    Value: !Ref SubnetTier2AZ2
    Export:
      Name: !Sub '${AWS::StackName}-SubnetTier2AZ2'

  Tier2RouteTable:
    Condition: Tier2Available
    Value: !Ref Tier2RouteTable
    Export:
      Name: !Sub '${AWS::StackName}-Tier2RouteTable'

  Tier3Name:
    Condition: Tier3Available
    Value: !Ref Tier3Name
    Export:
      Name: !Sub '${AWS::StackName}-Tier3Name'

  SubnetTier3AZ1CIDR:
    Condition: Tier3AZ1Available
    Value: !Ref SubnetTier3AZ1CIDR
    Export:
      Name: !Sub '${AWS::StackName}-SubnetTier3AZ1CIDR'

  SubnetTier3AZ1:
    Condition: Tier3AZ1Available
    Value: !Ref SubnetTier3AZ1
    Export:
      Name: !Sub '${AWS::StackName}-SubnetTier3AZ1'

  SubnetTier3AZ2CIDR:
    Condition: Tier3AZ2Available
    Value: !Ref SubnetTier3AZ2CIDR
    Export:
      Name: !Sub '${AWS::StackName}-SubnetTier3AZ2CIDR'

  SubnetTier3AZ2:
    Condition: Tier3AZ2Available
    Value: !Ref SubnetTier3AZ2
    Export:
      Name: !Sub '${AWS::StackName}-SubnetTier3AZ2'

  Tier3RouteTable:
    Condition: Tier3Available
    Value: !Ref Tier3RouteTable
    Export:
      Name: !Sub '${AWS::StackName}-Tier3RouteTable'

  Tier4Name:
    Condition: Tier4Available
    Value: !Ref Tier4Name
    Export:
      Name: !Sub '${AWS::StackName}-Tier4Name'

  SubnetTier4AZ1CIDR:
    Condition: Tier4AZ1Available
    Value: !Ref SubnetTier4AZ1CIDR
    Export:
      Name: !Sub '${AWS::StackName}-SubnetTier4AZ1CIDR'

  SubnetTier4AZ1:
    Condition: Tier4AZ1Available
    Value: !Ref SubnetTier4AZ1
    Export:
      Name: !Sub '${AWS::StackName}-SubnetTier4AZ1'

  SubnetTier4AZ2CIDR:
    Condition: Tier4AZ2Available
    Value: !Ref SubnetTier4AZ2CIDR
    Export:
      Name: !Sub '${AWS::StackName}-SubnetTier4AZ2CIDR'

  SubnetTier4AZ2:
    Condition: Tier4AZ2Available
    Value: !Ref SubnetTier4AZ2
    Export:
      Name: !Sub '${AWS::StackName}-SubnetTier4AZ2'

  Tier4RouteTable:
    Condition: Tier4Available
    Value: !Ref Tier4RouteTable
    Export:
      Name: !Sub '${AWS::StackName}-Tier4RouteTable'